# Library for creating auto-generated rules throughout a codebase.
from core.log import log_traceback
@log_traceback
def test():
    from java.util import UUID

    from core import jsr223
    from core import rules
    from core import triggers

    from core.util import items
    from core.util import types
test()

jsr223.scope.scriptExtension.importPreset("RuleSimple")
jsr223.scope.scriptExtension.importPreset("RuleSupport")
jsr223.scope.scriptExtension.importPreset("RuleFactories")


def rule(condition, pass_context=False):
    def decorator(function):
        @rules.rule(
            'AutoGen-%s' % (str(UUID.randomUUID())),
            description='Auto-generated rule',
            tags=['Autogenerated'],
        )
        @triggers.when(condition)
        @suppress()
        @log_traceback
        @wraps(function)
        def wrapper(event):
            if pass_context:
                return function(event)
            else:
                return function()
        return function
    return decorator


def cron(timespec):
    return rule('Time cron "%s"' % timespec)


def on_change(item, pass_context=False, null_context=False):
    def decorator(function):
        @rule(
            'Item %s changed' % item, 
            pass_context=pass_context
        )
        @wraps(function)
        def wrapper(event):
            if not pass_context:
                return function()

            old_item_value = types.from_type(event.oldItemState)
            new_item_value = types.from_type(event.itemState)
            if null_context or (old_item_value is not None and new_item_value is not None):
                return function(old_item_value, new_item_value)
        return function
    return decorator


def on_command(item, pass_context=False, null_context=False):
    def decorator(function):
        @rule(
            'Item %s received command' % item, 
            pass_context=True
        )
        @wraps(function)
        def wrapper(event):
            if not pass_context:
                return function()
            value = types.from_type(event.itemCommand)
            if null_context or value is not None:
                return function(value)
        return function
    return decorator


def on_update(item, pass_context=False, null_context=False):
    def decorator(function):
        @rule(
            'Item %s received update' % item, 
            pass_context=True
        )
        @wraps(function)
        def wrapper(function):
            if not pass_context:
                return function()
            value = types.from_type(event.itemState)
            if null_context or value is not None:
                return func(value)
        return function
    return decorator
