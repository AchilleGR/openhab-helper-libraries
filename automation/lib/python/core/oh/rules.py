# Library for creating auto-generated rules throughout a codebase.

import uuid
import random

from .. import jsr223
from .. import rules
from .. import triggers

from . import items
from . import types


jsr223.scope.scriptExtension.importPreset("RuleSimple")
jsr223.scope.scriptExtension.importPreset("RuleSupport")
jsr223.scope.scriptExtension.importPreset("RuleFactories")


def rule(condition, pass_context=False):
    def rule_process_event(event, func):
        if pass_context:
            return func(event)
        else:
            return func()

    def rule_wrapper(func):
        return rules.rule(
            'AutoGen-%s' % (str(uuid.uuid1())),
            description='Auto-generated rule',
            tags=['Autogenerated'],
        ) (
            triggers.when(condition) (
                lambda event: rule_process_event(event, func)
            )
        )

    return rule_wrapper


def cron(timespec):
    return rule('Time cron "%s"' % timespec)


def on_change(item, pass_context=False, null_context=False):
    if pass_context:
        if null_context:
            def on_change_decorator(func):
                def on_change_event_handler(event):
                    old_item_value = types.from_type(event.oldItemState)
                    new_item_value = types.from_type(event.itemState)
                    return func(old_item_value, new_item_value)
                return on_change_event_handler
        else:
            def on_change_decorator(func):
                def on_change_event_handler(event):
                    old_item_value = types.from_type(event.oldItemState)
                    new_item_value = types.from_type(event.itemState)
                    if (old_item_value is not None and new_item_value is not None):
                        return func(old_item_value, new_item_value)
                return on_change_event_handler

        return lambda func: rule(
            'Item %s changed' % item, 
            pass_context=True
        ) (
            on_change_decorator(func)
        )
    else:
        return lambda func: rule(
            'Item %s changed' % item, 
            pass_context=True
        ) (
            lambda event: func()
        )


def on_command(item, pass_context=False):
    if pass_context:
        def on_command_decorator(func):
            def on_command_event_handler(event):
                value = types.from_type(event.itemCommand)
                if value is not None:
                    return func(value)
            return on_command_event_handler
        return lambda func: rule(
            'Item %s received command' % item, 
            pass_context=True
        ) (
            on_command_decorator(func)
        )

    else:
        return lambda func: rule(
            'Item %s received command' % item, 
            pass_context=True
        ) (
            lambda event: func()
        )


def on_update(item, pass_context=False):
    if pass_context:
        def on_update_decorator(func):
            def on_update_event_handler(event):
                value = types.from_type(event.itemState)
                if value is not None:
                    return func(value)
            return on_update_event_handler

        return lambda func: rule(
            'Item %s received update' % item, 
            pass_context=True
        ) (
            on_update_decorator(func)
        )

    else:
        return lambda func: rule(
            'Item %s received update' % item, 
            pass_context=True
        ) (
            lambda event: func()
        )
